# Airport App System Test Non-Database Buttons

## System Test: Determining whether the buttons not associated with the database work correctly.

### Preconditions

- Repository exists on <git.unl.edu>.
- The repository has been cloned on the local file system.
- The local copy of the repository is up-to-date with the remote repository.
- The tester has access to the repository and has an SSH public key associated
  with their account on <git.unl.edu>.
- You have applied openweather connector to your project build path
- The installer has been run.
- No changes to the database have been made.

### Test

1.  If you click the run button on the left on line 1 in main.py of airport_tracking_app, the app should appear on your screen.

2.  Click the button labeled "Create Airport". A new screen should appear with the label "Create Airport" at the top.

3.  Put several characters into each of the textboxes.

4.  Next, click the button on the right labeled "Discard Changes". Verify that all the textboxes are now empty.

5.  Click the button labeled "BACK" and verify that you are taken back to the main screen.

6.  Click the button labeled "Create City". A new screen should appear with the label "Create City"

7.  Repeat steps 4 and 5.

8.  Click the button labeled "Check Forecast"

9.  Repeat step 5.

10. Click the button in the bottom right labeled "Quit". The application should close.

If the program runs as outlined in the instructions, then the application is working correctly.



# Airport App System Test Creating Airport and City

## System Test: Determining whether the application can successfully add airports and cities to the database.

### Preconditions

- Repository exists on <git.unl.edu>.
- The repository has been cloned on the local file system.
- The local copy of the repository is up-to-date with the remote repository.
- The tester has access to the repository and has an SSH public key associated
  with their account on <git.unl.edu>.
- The installer has been run.
- No changes have been made to the database.

### Test

1.  If you click the run button on the left on line 1 in main.py of airport_tracking_app, the app should appear on your screen.

2.  Click the button labeled "Create Airport". A new screen should appear with the label "Create Airport" at the top.

3.  In the "Name" textbox, type "Blando Airport". In the "ICAO Code" textbox, type "CODE". In the "Longitude" textbox, type "90". In the latitude textbox,   	type "90".

4.  Click on the bottom right button labeled "CREATE AIRPORT". Verify that a success screen shows up.

5.  At the bottom of the screen, you are prompted to add a city that is serviced by the airport. Click on "Blando". Verify that no error message has been 	shown.

6.  Click the buttom at the top right labeled "X". Verify that you are taken back to the main screen.

7.  Click the button labeled "Create City". A new screen should appear with the label "Create City" at the top.

8.  In the "Name" textbox, type "New York City". In the "Geographic Entity" textbox, type "New York". In the "Longitude" textbox, type "41". In the         	"Latitude" texbox type "-74".

9.  Next, click the button on the bottom right labeled "CREATE CITY". Verify that a success screen shows up.

10. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

11. Run the command "use database kandrews;"

12. Run the command "select * from airports;". Verify that there is a row with an airport_id of 6 with the name being "Blando Airport", the longitude being 	"90", the latitude being "90", and the code being "CODE".

13. Run the command "select * from cities;". Verify that there is a row with a city_id of 8, a name of "New York City", an encompassing_geographic_entity of 	"New York", a latitude of "41", and a longitude of "-74".

14. Run the command "select * from airport_cities;". Verify that there is a row with an airport_id of 6, and a city_id of 5.

If the program runs as outlined in the instructions and the database is updated in the correct way, then the application is working correctly.



# Airport App System Test Creating Airport and City

## System Test: Determining whether the application can successfully add airports and cities to the database.

### Preconditions

- Repository exists on <git.unl.edu>.
- The repository has been cloned on the local file system.
- The local copy of the repository is up-to-date with the remote repository.
- The tester has access to the repository and has an SSH public key associated
  with their account on <git.unl.edu>.
- The installer has been run.
- No changes have been made to the database.

### Test

1.  If you click the run button on the left on line 1 in main.py of airport_tracking_app, the app should appear on your screen.

2.  Click the button labeled "Create Airport". A new screen should appear with the label "Create Airport" at the top.

3.  Click the buttom in the bottom right labeled "CREATE AIRPORT". Verify that the error message "Some information inputs were left blank, please fill 		out all inputs" shows up.

4.  In the "Name" textbox, type "Airport". In the "ICAO code" textbox, type "AAAA". In the "Longitude" textbox, type "One". In the "Latitude" textbox, type 	"Two".

5.  Click the buttom labeled "CREATE AIRPORT". Verify that the error message "Invalid Input-Please Try Again" shows up and that all the textboxes are       	cleared.

6.  Click the button labeled "BACK".

7.  Click the button labeled "CREATE CITY". A new screen should appear with the label "Create City" at the top.

8.  Click the buttom in the bottom right labeled "CREATE CITY". Verify that the error message "Some information inputs were left blank, please fill 		out all inputs" shows up.

9.  In the "Name" textbox, type "City". In the "Geographic Entity" textbox, type "State". In the "Longitude" textbox, type "One". In the "Latitude"  		textbox, type "Two".

10. Click the buttom labeled "CREATE CITY". Verify that the error message "Invalid Input-Please Try Again" shows up and that all the textboxes are       		cleared.

11. Click the button labeled "BACK". Then click the button labeled "Check Forecasts".

12. In the textbox at the top of the screen, type "June 12, 2022".

13. Click the button labeled "Check Forecasts".

14. Verify that an error message shows up saying that the date you inputted is in the wrong format.

If the program ran as outlined in the instructions the application behaved correctly.



# Airport App System Test Check Forecast

## System Test: Determining whether the application can successfully check forecasts

### Preconditions

- Repository exists on <git.unl.edu>.
- The repository has been cloned on the local file system.
- The local copy of the repository is up-to-date with the remote repository.
- The tester has access to the repository and has an SSH public key associated
  with their account on <git.unl.edu>.
- The installer has been run.
- No changes have been made to the database.

### Test

1.  If you click the run button on the left on line 1 in main.py of airport_tracking_app, the app should appear on your screen.

2.  Click the button labeled "Check Forecast". A new screen should appear with the label "Check Forecast" at the top.
#unfinished test



# Entertainment App System Test Non-Database Buttons

## System Test: Determining whether the buttons not associated with the database work correctly.

### Preconditions

- Repository exists on <git.unl.edu>.
- The repository has been cloned on the local file system.
- The local copy of the repository is up-to-date with the remote repository.
- The tester has access to the repository and has an SSH public key associated
  with their account on <git.unl.edu>.
- The installer has been run.
- No changes have been made to the database.

### Test

1.  If you click the run button on the left on line 1 in main.py of entertainment_tracking_app, the app should appear on your screen.

2.  Click the button labelled "Create City". A new screen should appear with the label "Create City" at the top.

3.  In the "City Name" textbox, type "Chicago". In the "Latitude" textbox, type "5". In the "Longitude" textbox, type "10". In the "Encompassing Geographic 	Entity" textbox, type "Illinois".

4.  Click the button "CREATE CITY". You should be taken to a new screen with a success message at the top.

5.  At the bottom of this screen, you are asked if you want to create a new venue to your city. Click the "YES" option. You will be taken to a new screen   	with "CREATE NEW VENUE" at the top of the screen.

6.  In the "Venue Name" textbox, type "United Center". Click on the dropdown next to the label "Associated City", then scroll down and select "Chicago".    	Click on the dropdown next to the label "Venue Type" and select "Indoor Sports Arena".

7.  Click on the button labeled "NEXT".
#unfinished test  


# Travel Planner App System Tests

## System Test: Determine whether the application can successfully run.

### Preconditions

- Repository exists on <git.unl.edu>.
- The repository has been cloned on the local file system.
- The local copy of the repository is up-to-date with the remote repository.
- The tester has access to the repository and has an SSH public key associated
  with their account on <git.unl.edu>.
- The installer has been run.
- No changes have been made to the database.

### Test Validate City
#### Description: see if application changed validation value after selected and validated.

1. From the main menu page after completing Test 1 press the Validate Locations button and you will be navigated to another screen

2. Press the button that says 'Select City or Airport' and press Denver which should be the first option.

3. Press the validate button and you will be given a success message.

4. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

5. Run the command "use database kandrews;"

6. Run the command "select * from cities"

7. press ctrl + f to open a search bar and type in 'Denver'

8. find the row in the table with Denver and check to make sure that the validate field has been changed to True.


### Test Validate Airport
#### Description: see if application changed validation value after selected and validated.

1. From the main menu page after completing Test 1 press the Validate Locations button and you will be navigated to another screen

2. Press the button that says 'Select City or Airport' and scroll until you come across Lincoln Airport. Select this value.

3. Press the validate button and you will be given a success message.

4. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

5. Run the command "use database kandrews;"

6. Run the command "select * from airports"

7. Scroll through and find Lincoln Aiport. Check that its Value for validate has been changed to True


### Test Accept Rating
#### Description: see if application changed validation value after selected and validated.

1. From the main menu page after completing Test 1 press the Update Ratings button and you will be navigated to another screen

2. On the screen select the two boxes under the Chase Center.

3. Press the Accept or Reject button and press Accept

4. Click the validate button and the reviews should disappear as they have been updated.

5. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

6. Run the command "use database kandrews;"

7. Run the command "select * from reviews"

8. You should now see that the reviews you selected have had their validated field turned True.


### Test Reject Ratings
#### Description: see if application deletes value after selected and updated.

1. From the main menu page after completing Test 1 press the Update Ratings button and you will be navigated to another screen

2. On the screen select the two boxes under the Chase Center.

3. Press the Accept or Reject button and press Reject

4. Click the validate button and the reviews should disappear as they have been deleted.

5. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

6. Run the command "use database kandrews;"

7. Run command "select * from reviews"

8. You should now see that the reviews you selected have been deleted


### Test Prepare Itineraries
#### Description: see if application creates the proper amount of itineraries.

1. From the main menu page after completing Test 1 press the Prepare Itinerary button and you will be navigated to another screen

2. From here you will need to wait for the two sets of itineraries to be created.

3. Once the Itineraries appear on the screen exit the program.

4. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

5. Run the command "use database kandrews;"

6. Run the command "select * from itineraries"

7. Check that 14 new itineraries created. 7 Close and 7 Entertainment.


### Test Prepare Itineraries with no new Itineraries
#### Description: see if application creates no new itineraries when none are needed.

1. From the main menu page after completing Test 1 press the Prepare Itinerary button and you will be navigated to another screen

2. From here you will need to wait for the two sets of itineraries to not be created.

3. Once you see that no itineraries have been created exit the program.

4. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

5. Run the command "use database kandrews;"

6. Run the command "select * from itineraries"

7. From here check that the original 14 itineraries from the last system test and nothing more.

### Test Prepare Only a Few Itineraries
#### Advance the calendar day and create a few itineraries.

1. From the main menu page after completing Test 1 click the 'Advance Calendar Day' button 3 times.

2. Then click the Prepare Itineraries Button.

3. From here you will need to wait for the two sets of itineraries to not be created.

4. Once you see that no itineraries have been created exit the program.

5. Open up a terminal window and run the command "mysql -h cse.unl.edu -u kandrews -p". You should be prompted for a password, type "qUc:6M".

6. Run the command "use database kandrews;"

7. Run the command "select * from itineraries"

8. From here check that only 8 itineraries have been made.






